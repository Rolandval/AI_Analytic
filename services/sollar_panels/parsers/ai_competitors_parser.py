import asyncio
import json
import time
import google.generativeai as genai
from typing import List, Dict
from dotenv import load_dotenv
import os

load_dotenv()


genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

model = genai.GenerativeModel(
    model_name="gemini-1.5-flash",
    generation_config={
        "temperature": 0.3,
        "top_p": 1,
        "top_k": 40,
        "max_output_tokens": 999999
    }
)


def parse_chunk(index: int, data: Dict[str, str]) -> List[Dict]:
    text = data["sollar_panels"]
    prompt = f"""
–î—ñ–π —è–∫ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –ø–∞—Ä—Å–µ—Ä —ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç –∑ –ø—Ä–æ–¥–∞–∂—É —Å–æ–Ω—è—á–Ω–∏—Ö –ø–∞–Ω–µ–ª–µ–π.

üìå –ì–û–õ–û–í–ù–ï: —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–∑–Ω–∞—á, —á–∏ –¥—ñ–π—Å–Ω–æ —Ç–æ–≤–∞—Ä —î —Å–æ–Ω—è—á–Ω–æ—é –ø–∞–Ω–µ–ª–ª—é. –Ø–∫—â–æ —Ü–µ –Ω–µ –ø–∞–Ω–µ–ª—å ‚Äî –ü–†–û–ü–£–°–¢–ò –π–æ–≥–æ.

–ó —Ü—å–æ–≥–æ HTML-—Ñ—Ä–∞–≥–º–µ–Ω—Ç—É –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏—Ç—è–≥–Ω–∏ –¥–∞–Ω—ñ –ø—Ä–æ —Å–æ–Ω—è—á–Ω—ñ –ø–∞–Ω–µ–ª—ñ —Ç–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏ —ó—Ö —É –º–∞—Å–∏–≤ JSON –æ–±'—î–∫—Ç—ñ–≤ —Ç–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É:
{{
  "brand": brand,
  "name": model,
  "power": power,
  "full_name": full_name,
  "price": price,
  "panel_type": panel_type,
  "cell_type": cell_type,
  "thickness": thickness
}}

üìå –î–µ—Ç–∞–ª—ñ –ø–∞—Ä—Å–∏–Ω–≥—É:
- `brand`: –Ω–∞–∑–≤–∞ –±—Ä–µ–Ω–¥—É –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º (–Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ –∑ –ø–æ–º–∏–ª–∫–æ—é –∞–±–æ —É —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—ñ)
- `name`: –Ω–∞–∑–≤–∞ –º–æ–¥–µ–ª—ñ –º—ñ–∂ –±—Ä–µ–Ω–¥–æ–º —ñ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—é (—è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä–Ω–∏ –±—Ä–µ–Ω–¥)
- `power`: –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å —É –≤–∞—Ç–∞—Ö (W). –Ø–∫—â–æ –Ω–µ–º–∞—î ‚Äî –ª–æ–≥—ñ—á–Ω–æ –≤–∏–≤–µ–¥–∏ –∑ –Ω–∞–∑–≤–∏ –º–æ–¥–µ–ª—ñ –∞–±–æ –æ–ø–∏—Å—É. –Ø–∫—â–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ ‚Äî 0
- `full_name`: –ø–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞ –∞–±–æ –æ–ø–∏—Å –ø–∞–Ω–µ–ª—ñ
- `price`: —Ü—ñ–Ω–∞ –∑–∞ 1 —à—Ç —É –¥–æ–ª–∞—Ä–∞—Ö. –Ø–∫—â–æ —Ü—ñ–Ω–∞ –≤–∫–∞–∑–∞–Ω–∞ –∑–∞ –≤–∞—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 0.13 –∞–±–æ 0,138) ‚Äî –ø–µ—Ä–µ–º–Ω–æ–∂ –Ω–∞ `power`. –Ø–∫—â–æ –≤–∞–ª—é—Ç–∞ —ñ–Ω—à–∞ ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç—É–π —É $ (—è–∫—â–æ –º–æ–∂–ª–∏–≤–æ). –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî 0
- `panel_type`: –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è –∞–±–æ –¥–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è. –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ ‚Äî –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è
- `cell_type`: n-type –∞–±–æ p-type. –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ ‚Äî n-type
- `thickness`: —Ç–æ–≤—â–∏–Ω–∞ –ø–∞–Ω–µ–ª—ñ –≤ –º–º. –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ ‚Äî 30

‚ÄºÔ∏è–í–ê–ñ–õ–ò–í–û:
- –¶—ñ–Ω–∞ —Ñ–æ—Ä–º–∞—Ç—É "0.13", "0,138" ‚Äî —Ü–µ —Ü—ñ–Ω–∞ –∑–∞ –í–ê–¢. –ù–µ –ø–µ—Ä–µ–ø–ª—É—Ç–∞–π –∑ 13$.
  –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 425W * 0.13 = 55.25$

–û—Å—å HTML-–¥–∞–Ω—ñ:
{text}

‚ùóÔ∏è–ü–æ–≤–µ—Ä–Ω–∏ –ª–∏—à–µ —á–∏—Å—Ç–∏–π JSON —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –ë–µ–∑ –∑–∞–π–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É.
"""

    try:
        response = model.generate_content(prompt)
        response_text = response.text.strip()

        # –û—á–∏—â–µ–Ω–Ω—è
        if response_text.startswith("```json"):
            response_text = response_text.replace("```json", "", 1)
        if response_text.endswith("```"):
            response_text = response_text.rsplit("```", 1)[0]

        parsed = json.loads(response_text)
        print(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ –±–ª–æ–∫ {index}: –∑–Ω–∞–π–¥–µ–Ω–æ {len(parsed)} –∞–∫—É–º—É–ª—è—Ç–æ—Ä—ñ–≤")
        return parsed

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞ –±–ª–æ—Ü—ñ {index}: {e}")
        return []


async def ai_parser(all_data: List[Dict[str, str]]) -> List[Dict]:
    parsed_results = []
    min_request_time = 10
    for i, data in enumerate(all_data):
        start_time = time.time()
        result = parse_chunk(i, data)
        parsed_results.extend(result)

        elapsed_time = time.time() - start_time
        if elapsed_time < min_request_time and i < len(all_data) - 1:  # –Ω–µ —á–µ–∫–∞—î–º–æ –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
            wait_time = min_request_time - elapsed_time
            print(f"‚è≥ –ó–∞–ø–∏—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ –∑–∞ {elapsed_time:.1f} —Å–µ–∫. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è {wait_time:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º...")
            time.sleep(wait_time)


    return parsed_results


# # –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø—É—Å–∫—É:async def ai_parser(all_data: List[Dict[str, str]]) -> List[Dict]:
    parsed_results = []
    base_wait_time = 10  # –ë–∞–∑–æ–≤–∏–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    max_wait_time = 120  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    consecutive_errors = 0  # –õ—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
    
    for i, data in enumerate(all_data):
        start_time = time.time()
        
        # –°–ø—Ä–æ–±–∞ –∑ –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö
        max_retries = 3
        for retry in range(max_retries):
            try:
                result = parse_chunk(i, data)
                parsed_results.extend(result)
                consecutive_errors = 0  # –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ —É—Å–ø—ñ—Ö—É
                break
            except Exception as e:
                error_message = str(e)
                if "429" in error_message:  # –ü–æ–º–∏–ª–∫–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
                    consecutive_errors += 1
                    
                    # –í–∏—Ç—è–≥—É—î–º–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ
                    retry_delay = 0
                    if "retry_delay" in error_message and "seconds" in error_message:
                        try:
                            # –°–ø—Ä–æ–±–∞ –≤–∏—Ç—è–≥—Ç–∏ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
                            retry_part = error_message.split("retry_delay")[1]
                            seconds_part = retry_part.split("seconds:")[1].split("}")[0].strip()
                            retry_delay = int(seconds_part)
                        except:
                            retry_delay = 0
                    
                    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑ –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∏–º –≤—ñ–¥—Å—Ç—É–ø–∞–Ω–Ω—è–º
                    wait_time = max(
                        base_wait_time * (2 ** consecutive_errors),  # –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–µ –≤—ñ–¥—Å—Ç—É–ø–∞–Ω–Ω—è
                        retry_delay + 5  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —á–∞—Å –∑ API + –∑–∞–ø–∞—Å
                    )
                    wait_time = min(wait_time, max_wait_time)  # –û–±–º–µ–∂—É—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–º —á–∞—Å–æ–º
                    
                    print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ –Ω–∞ –±–ª–æ—Ü—ñ {i}, —Å–ø—Ä–æ–±–∞ {retry+1}/{max_retries}. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è {wait_time} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(wait_time)
                    
                    if retry == max_retries - 1:  # –û—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞
                        print(f"‚ùå –í–∏—á–µ—Ä–ø–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –¥–ª—è –±–ª–æ–∫—É {i}")
                        break
                else:
                    # –Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞, –Ω–µ –ø–æ–≤'—è–∑–∞–Ω–∞ –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º —à–≤–∏–¥–∫–æ—Å—Ç—ñ
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞ –±–ª–æ—Ü—ñ {i}: {e}")
                    break
        
        # –ó–∞–≤–∂–¥–∏ —á–µ–∫–∞—î–º–æ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏, –Ω–∞–≤—ñ—Ç—å –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏
        elapsed_time = time.time() - start_time
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
        adaptive_wait_time = base_wait_time * (1 + (consecutive_errors * 0.5))
        
        if elapsed_time < adaptive_wait_time and i < len(all_data) - 1:
            wait_time = adaptive_wait_time - elapsed_time
            print(f"‚è≥ –ó–∞–ø–∏—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ –∑–∞ {elapsed_time:.1f} —Å–µ–∫. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è {wait_time:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º...")
            time.sleep(wait_time)

    return parsed_results

