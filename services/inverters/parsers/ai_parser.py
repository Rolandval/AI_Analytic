import csv
import json
import google.generativeai as genai
from dotenv import load_dotenv
import os

load_dotenv()


def ai_parser(csv_path: str, chunk_size: int = 50):
    genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—É –º–æ–¥–µ–ª—å gemini-1.5-flash –∞–±–æ gemini-pro
    model = genai.GenerativeModel(
        model_name="gemini-1.5-flash",
        generation_config={
            "temperature": 0.3,
            "top_p": 1,
            "top_k": 40,
            "max_output_tokens": 999999
        }
    )
    results = []

    with open(csv_path, newline='', encoding='utf-8') as f:
        reader = csv.reader(f)
        headers = next(reader)
        rows = list(reader)
    

        for i in range(0, len(rows), chunk_size):
            chunk = rows[i:i + chunk_size]

            # –§–æ—Ä–º—É—î–º–æ CSV-—Ä—è–¥–æ–∫
            csv_chunk = [headers] + chunk
            csv_text = '\n'.join([','.join(row) for row in csv_chunk])

            prompt = f"""
–î—ñ–π —è–∫ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –ø–∞—Ä—Å–µ—Ä —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç —ñ–∑ –ø—Ä–æ–¥–∞–∂—É —ñ–Ω–≤–µ—Ä—Ç–æ—Ä—ñ–≤ –¥–ª—è —Å–æ–Ω—è—á–Ω–∏—Ö –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ–π.

–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ CSV-—Ñ—Ä–∞–≥–º–µ–Ω—Ç, —â–æ –º—ñ—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–ª—ñ–∫ —Ç–æ–≤–∞—Ä—ñ–≤, —Ç–∞ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∏. –ü–æ–≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –≤–∏–≥–ª—è–¥—ñ –º–∞—Å–∏–≤—É JSON-–æ–±'—î–∫—Ç—ñ–≤ —ñ–∑ —Ç–∞–∫–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é:

{{
  "brand": brand,
  "name": model,
  "full_name": full_name,
  "price": price,
  "inverter_type": inverter_type,
  "generation": generation,
  "string_count": string_count,
  "firmware": firmware,
  "power": power
}}

üîç –ü—Ä–∞–≤–∏–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥—É:

1. **–ù–∞—è–≤–Ω—ñ—Å—Ç—å**: –ü—Ä–æ–ø—É—Å–∫–∞–π —Ç–æ–≤–∞—Ä–∏, —è–∫–∏—Ö **–Ω–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ**.

2. **–ë—Ä–µ–Ω–¥**:
   - –í–∏—Ç—è–≥–Ω–∏ –Ω–∞–∑–≤—É –±—Ä–µ–Ω–¥—É –æ–¥–Ω–∏–º **—á–∏—Å—Ç–∏–º —Å–ª–æ–≤–æ–º**.
   - –í–∏–ø—Ä–∞–≤–ª—è–π —Ç–∏–ø–æ–≤—ñ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è —Ç–∞ –ø–æ–º–∏–ª–∫–∏ –≤ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ñ.

3. **–ù–∞–∑–≤–∞ (name)**:
   - –í–∏—Ç—è–≥–Ω–∏ –º–æ–¥–µ–ª—å —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∞.
   - –Ø–∫—â–æ –º–æ–¥–µ–ª—å –Ω–µ –≤–∫–∞–∑–∞–Ω–∞, –ø–æ–≤–µ—Ä–Ω–∏ —è–∫ `name` –Ω–∞–∑–≤—É –±—Ä–µ–Ω–¥—É.

4. **–¶—ñ–Ω–∞**:
   - –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∑–Ω–∞—á –≤ —è–∫—ñ–π –≤–∞–ª—é—Ç—ñ –∑–∞–ø–∏—Å—É—é—Ç—å—Å—è —Ü—ñ–Ω–∏.
   - –ó–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞–π **–Ω–∞–π–º–µ–Ω—à—É –æ–ø—Ç–æ–≤—É —Ü—ñ–Ω—É –≤ –¥–æ–ª–∞—Ä–∞—Ö –°–®–ê –∑–∞ —à—Ç—É–∫—É**.
   - –Ø–∫—â–æ —Ü—ñ–Ω–∞ –≤–∫–∞–∑–∞–Ω–∞ –≤ —ñ–Ω—à—ñ–π –≤–∞–ª—é—Ç—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≥—Ä–∏–≤–Ω—ñ –∞–±–æ —î–≤—Ä–æ), –∫–æ–Ω–≤–µ—Ä—Ç—É–π —ó—ó –≤ –¥–æ–ª–∞—Ä–∏.
   - –Ø–∫—â–æ —Ü—ñ–Ω–∞ –≤—ñ–¥—Å—É—Ç–Ω—è, –ø–æ–≤–µ—Ä–Ω–∏ `0`.

5. **full_name**:
   - –ü–æ–≤–Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –Ω–∞–∑–≤–∞ –∞–±–æ –æ–ø–∏—Å –∑ —Ä—è–¥–∫–∞ CSV.

6. **–¢–∏–ø —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∞ (inverter_type)**:
   - –í–∏–∑–Ω–∞—á —Ç–∏–ø —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∞: **"gybrid"** (–≥—ñ–±—Ä–∏–¥–Ω–∏–π), **"off-grid"** (–∞–≤—Ç–æ–Ω–æ–º–Ω–∏–π), **"on-grid"** (–º–µ—Ä–µ–∂–µ–≤–∏–π).
   - –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ ‚Äî –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º `"gybrid"`.

7. **–ü–æ–∫–æ–ª—ñ–Ω–Ω—è (generation)**:
   - –í–∏–∑–Ω–∞—á –ø–æ–∫–æ–ª—ñ–Ω–Ω—è —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "3", "4", "5").
   - –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ ‚Äî –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º `"4"`.

8. **–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—Ä—ñ–Ω–≥—ñ–≤ (string_count)**:
   - –í–∏–∑–Ω–∞—á –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—Ä—ñ–Ω–≥—ñ–≤ (–≤—Ö–æ–¥—ñ–≤) —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∞ —è–∫ —Ü—ñ–ª–µ —á–∏—Å–ª–æ.
   - –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ ‚Äî –ø–æ–≤–µ—Ä–Ω–∏ `0`.

9. **–ü—Ä–æ—à–∏–≤–∫–∞ (firmware)**:
   - –í–µ—Ä—Å—ñ—è –ø—Ä–æ—à–∏–≤–∫–∏ —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∞, —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–∞.
   - –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ ‚Äî –ø–æ–≤–µ—Ä–Ω–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ `""`.

10. **–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å (power)**:
    - –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∞ —É –í—Ç.
    - –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ ‚Äî –ø–æ–≤–µ—Ä–Ω–∏ `0`.

–¢–µ–ø–µ—Ä –≤–∏—Ç—è–≥–Ω–∏ –¥–∞–Ω—ñ –ø—Ä–æ —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∏ –∑ CSV-—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –Ω–∏–∂—á–µ —Ç–∞ –ø–æ–≤–µ—Ä–Ω–∏ –ª–∏—à–µ –º–∞—Å–∏–≤ JSON-–æ–±'—î–∫—Ç—ñ–≤.

–í—Ö—ñ–¥–Ω—ñ CSV-–¥–∞–Ω—ñ:
{csv_text}

‚ùó –ü–æ–≤–µ—Ä–Ω–∏ **—Ç—ñ–ª—å–∫–∏ —á–∏—Å—Ç–∏–π JSON** ‚Äî –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –∞–±–æ —Ç–µ–∫—Å—Ç—É.
"""

            try:
                response = model.generate_content(prompt)
                response_text = response.text
                
                # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ —Å–∏–º–≤–æ–ª–∏, —è–∫—ñ –º–æ–∂—É—Ç—å –∑–∞–≤–∞–∂–∞—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥—É JSON
                response_text = response_text.strip()
                if response_text.startswith("```json"):
                    response_text = response_text.replace("```json", "", 1)
                if response_text.endswith("```"):
                    response_text = response_text.rsplit("```", 1)[0]
                response_text = response_text.strip()
                
                # –ü–∞—Ä—Å–∏–º–æ JSON
                json_data = json.loads(response_text)
                results.extend(json_data)
                print(f"–£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ –±–ª–æ–∫ {i}-{i + len(chunk)}: –∑–Ω–∞–π–¥–µ–Ω–æ {len(json_data)} —ñ–Ω–≤–µ—Ä—Ç–æ—Ä—ñ–≤")
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞ –±–ª–æ—Ü—ñ {i}-{i + chunk_size}: {e}")
                print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å API: {response.text if 'response' in locals() else '–ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ'}")
                continue

    return results
