import asyncio
import json
import google.generativeai as genai
from typing import List, Dict


genai.configure(api_key="AIzaSyBTDRyFPscZuc1wuyvb-4hk7OCUbMnBN1s")  # –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π –∫–ª—é—á

model = genai.GenerativeModel(
    model_name="gemini-1.5-pro",
    generation_config={
        "temperature": 0.3,
        "top_p": 1,
        "top_k": 40,
        "max_output_tokens": 999999
    }
)


async def parse_chunk(index: int, data: Dict[str, str]) -> List[Dict]:
    text = data["batteries"]
    prompt = f"""
–î—ñ—è–π —è–∫ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –ø–∞—Ä—Å–µ—Ä —ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç –∑ –ø—Ä–æ–¥–∞–∂—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—å–Ω–∏—Ö –∞–∫—É–º—É–ª—è—Ç–æ—Ä—ñ–≤.

–ó —Ü—å–æ–≥–æ HTML-—Ñ—Ä–∞–≥–º–µ–Ω—Ç—É –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏—Ç—è–≥–Ω–∏ –¥–∞–Ω—ñ –ø—Ä–æ –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∏ —Ç–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏ —ó—Ö —É –º–∞—Å–∏–≤ JSON –æ–±'—î–∫—Ç—ñ–≤ —Ç–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É:
{{
  "brand": brand,
  "name": model,
  "volume": volume,
  "full_name": full_name,
  "price": price,
  "c_amps": c_amps,
  "region": region,
  "polarity": polarity,
  "electrolyte": electrolyte
}}

üìå –î–µ—Ç–∞–ª—ñ –ø–∞—Ä—Å–∏–Ω–≥—É:
- 'brand': –ø–æ–≤–µ—Ä–Ω–∏ –Ω–∞–∑–≤—É –±—Ä–µ–Ω–¥—É –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º
- `price`: –Ω–∞–π–º–µ–Ω—à–∏–π –æ–ø—Ç–æ–≤–∏–π
- `name`: –Ω–∞–∑–≤–∞ –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∞ –º—ñ–∂ –±—Ä–µ–Ω–¥–æ–º —ñ –æ–±'—î–º–æ–º(—è–∫—â–æ –ø—É—Å—Ç–∏–π —Ä—è–¥–æ–∫ —Ç–æ –ø–æ–≤–µ—Ä–Ω–∏ –≤ name –Ω–∞–∑–≤—É –±—Ä–µ–Ω–¥—É)
- `c_amps`: –ø—É—Å–∫–æ–≤–∏–π —Å—Ç—Ä—É–º(—è–∫—â–æ –Ω–µ–º–∞—î —Ç–æ 0)
- `region`: –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º EUROPE, —è–∫—â–æ —î "ASIA", —Ç–æ ASIA
- `polarity`: —É —Ñ–æ—Ä–º–∞—Ç—ñ R+ –∞–±–æ L+ (–≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –∑ —è–∫–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏ +(—è–∫—â–æ –ø–∏—à–µ (-/+) —Ç–æ —Ü–µ R+)))
- `electrolyte`: AGM, GEL, –∞–±–æ LAB (—è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π)
- `volume`: —î–º–Ω—ñ—Å—Ç—å –≤ Ah

–û—Å—å HTML-–¥–∞–Ω—ñ:
{text}

‚ùóÔ∏è–ü–æ–≤–µ—Ä–Ω–∏ –ª–∏—à–µ —á–∏—Å—Ç–∏–π JSON —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –ë–µ–∑ –∑–∞–π–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É.
"""

    try:
        response = await model.generate_content_async(prompt)
        response_text = response.text.strip()

        # –û—á–∏—â–µ–Ω–Ω—è
        if response_text.startswith("```json"):
            response_text = response_text.replace("```json", "", 1)
        if response_text.endswith("```"):
            response_text = response_text.rsplit("```", 1)[0]

        parsed = json.loads(response_text)
        print(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ –±–ª–æ–∫ {index}: –∑–Ω–∞–π–¥–µ–Ω–æ {len(parsed)} –∞–∫—É–º—É–ª—è—Ç–æ—Ä—ñ–≤")
        return parsed

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞ –±–ª–æ—Ü—ñ {index}: {e}")
        print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å API: {response.text if 'response' in locals() else '–ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ'}")
        return []


async def ai_parser(all_data: List[Dict[str, str]]) -> List[Dict]:
    parsed_results = []
    chunk_size = 2  # –º–∞–∫—Å–∏–º—É–º 2 –∑–∞–ø–∏—Ç–∏ –∑–∞ —Ä–∞–∑
    delay = 60      # —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ —É —Å–µ–∫—É–Ω–¥–∞—Ö

    for i in range(0, len(all_data), chunk_size):
        current_batch = all_data[i:i + chunk_size]
        tasks = [parse_chunk(i + j, data) for j, data in enumerate(current_batch)]
        results = await asyncio.gather(*tasks)
        parsed_results.extend([item for sublist in results for item in sublist])

        if i + chunk_size < len(all_data):  # —É–Ω–∏–∫–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫–∏ –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –±–∞—Ç—á—É
            print(f"‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ {chunk_size} –∑–∞–ø–∏—Ç–∞–º–∏...")
            await asyncio.sleep(delay)

    return parsed_results


# # –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø—É—Å–∫—É:
# if __name__ == "__main__":
#     example_data = asyncio.run(parse_batteries())
#     print(example_data)
#     parsed = asyncio.run(ai_parser(example_data))
#     print(json.dumps(parsed, indent=2, ensure_ascii=False))
